# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

imports:
    - { resource: ./parameters.yaml }

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $isDebug: '%kernel.debug%'
            $availableSkillSets: "%app.available_skills%"
            $importantSkillsLimit: "%app.most_important_skills_limit%"
            $importantSkillsToDisplay: "%app.most_important_skills_to_display%"
            $slotInterval: '%app.slot_interval%'
            array $userProperties: "%app.user_properties%"

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: "../src/*"
        exclude: "../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}"

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: "../src/Controller"
        tags: ["controller.service_arguments"]
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\EntityListener\:
        resource: "../src/EntityListener"
        tags: ["doctrine.orm.entity_listener"]

    App\DataFixtures\ApplicationFixtures:
        arguments:
            $nbUsers: '%env(int:APP_NB_USERS)%'
            $nbAvailabilities: '%env(int:APP_NB_AVAILABILITIES)%'

    App\DataFixtures\Faker\Provider\:
        resource: '../src/DataFixtures/Faker/Provider'
        tags: ['nelmio_alice.faker.provider']

    App\DataFixtures\Factory\:
        resource: '../src/DataFixtures/Factory'
        public: true # Required by fixtures

    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        arguments:
             - !service { class: PDO, factory: ['@database_connection', 'getWrappedConnection'] }
            # If you get transaction issues (e.g. after login) uncomment the line below
             - { lock_mode: 1 }

    # twig/cache-extension
    Twig\CacheExtension\CacheProvider\PsrCacheAdapter:
        arguments:
            $cache: '@cache.twig'
    Twig\CacheExtension\CacheStrategy\GenerationalCacheStrategy:
        arguments:
            $cache: '@Twig\CacheExtension\CacheProvider\PsrCacheAdapter'
            $keyGenerator: '@App\Twig\Cache\RequestGenerator'
            $lifetime: 86400 # 1 day

    # The cache strategy is overrided in services_dev
    Twig\CacheExtension\CacheStrategyInterface: '@Twig\CacheExtension\CacheStrategy\GenerationalCacheStrategy'
    Twig\CacheExtension\Extension:
        arguments:
            $cacheStrategy: '@Twig\CacheExtension\CacheStrategyInterface'

    App\Twig\Extension\OrganizationExtension:
        arguments:
            $routingExtension: '@twig.extension.routing'

    # declared as public because needed in a migration
    App\Domain\SkillSetDomain:
        public: true

    datetime_normalizer:
        class: Symfony\Component\Serializer\Normalizer\DateTimeNormalizer
        tags: [serializer.normalizer]
